{"id":"node_modules/date-fns/isWithinInterval.js","dependencies":[{"name":"C:\\Users\\vk221\\OneDrive\\Desktop\\work\\FR7\\MyTasks\\package.json","includedInParent":true,"mtime":1717857937106},{"name":"C:\\Users\\vk221\\OneDrive\\Desktop\\work\\FR7\\MyTasks\\node_modules\\date-fns\\package.json","includedInParent":true,"mtime":1717855665787},{"name":"./toDate.js","loc":{"line":3,"column":21,"index":80},"parent":"C:\\Users\\vk221\\OneDrive\\Desktop\\work\\FR7\\MyTasks\\node_modules\\date-fns\\isWithinInterval.js","resolved":"C:\\Users\\vk221\\OneDrive\\Desktop\\work\\FR7\\MyTasks\\node_modules\\date-fns\\toDate.js"}],"generated":{"js":"\"use strict\";\nexports.isWithinInterval = isWithinInterval;\nvar _index = require(\"./toDate.js\");\n\n/**\n * @name isWithinInterval\n * @category Interval Helpers\n * @summary Is the given date within the interval?\n *\n * @description\n * Is the given date within the interval? (Including start and end.)\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n * @param interval - The interval to check\n *\n * @returns The date is within the interval\n *\n * @example\n * // For the date within the interval:\n * isWithinInterval(new Date(2014, 0, 3), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> true\n *\n * @example\n * // For the date outside of the interval:\n * isWithinInterval(new Date(2014, 0, 10), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> false\n *\n * @example\n * // For date equal to interval start:\n * isWithinInterval(date, { start, end: date })\n * // => true\n *\n * @example\n * // For date equal to interval end:\n * isWithinInterval(date, { start: date, end })\n * // => true\n */\nfunction isWithinInterval(date, interval) {\n  const time = +(0, _index.toDate)(date);\n  const [startTime, endTime] = [\n    +(0, _index.toDate)(interval.start),\n    +(0, _index.toDate)(interval.end),\n  ].sort((a, b) => a - b);\n\n  return time >= startTime && time <= endTime;\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/date-fns/isWithinInterval.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}}],"sources":{"node_modules/date-fns/isWithinInterval.js":"\"use strict\";\nexports.isWithinInterval = isWithinInterval;\nvar _index = require(\"./toDate.js\");\n\n/**\n * @name isWithinInterval\n * @category Interval Helpers\n * @summary Is the given date within the interval?\n *\n * @description\n * Is the given date within the interval? (Including start and end.)\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n * @param interval - The interval to check\n *\n * @returns The date is within the interval\n *\n * @example\n * // For the date within the interval:\n * isWithinInterval(new Date(2014, 0, 3), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> true\n *\n * @example\n * // For the date outside of the interval:\n * isWithinInterval(new Date(2014, 0, 10), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> false\n *\n * @example\n * // For date equal to interval start:\n * isWithinInterval(date, { start, end: date })\n * // => true\n *\n * @example\n * // For date equal to interval end:\n * isWithinInterval(date, { start: date, end })\n * // => true\n */\nfunction isWithinInterval(date, interval) {\n  const time = +(0, _index.toDate)(date);\n  const [startTime, endTime] = [\n    +(0, _index.toDate)(interval.start),\n    +(0, _index.toDate)(interval.end),\n  ].sort((a, b) => a - b);\n\n  return time >= startTime && time <= endTime;\n}\n"},"lineCount":55}},"error":null,"hash":"574ad118ffe9ca33cd2a2fde0faa72dd","cacheData":{"env":{}}}